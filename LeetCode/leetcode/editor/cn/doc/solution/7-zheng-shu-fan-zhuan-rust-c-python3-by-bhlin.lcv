* []

```rust
impl Solution {
    pub fn reverse(x: i32) -> i32 {
        let min = i32::MIN / 10;
        let max = i32::MAX / 10;
        let mut x = x;
        let mut ans = 0;

        while (x != 0) {
            if (ans > max) || (ans < min) {
                return 0;
            }
            ans = ans * 10 + x % 10;
            x /= 10;
        }
        ans
    }
}
```

* []

```c
int reverse(int x) {
    int max = INT_MAX / 10;
    int min = INT_MIN / 10;
    int ans = 0;
    while (x) {
        if (ans > max || ans < min)
            return 0;
        ans = ans * 10 + x % 10;
        x /= 10;
    }
    return ans;
}
```

* []

```python
class Solution:
    def reverse(self, x):
        """
        :type x: int
        :rtype: int
        """
        sign = 1 if x > 0 else -1
        ret = sign * int(str(abs(x))[::-1])
        if abs(ret) > 2 ** 31:
            ret = 0
        
        return ret
```

